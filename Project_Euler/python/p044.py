import os
import math
import time

"""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
"""
#Brute force solution
#Phase1: Find one such pair, Pk and Pj, that meets the constraints
#Phase2: Continue until |Pk - Pk+1| is greater than found pair

#takes value, t, returns n
#quadratic formula a=3 b=-1
def pentagonal_inverse(t):
    return (1 + math.sqrt(1+24*t))/6

#returns true if value is pentagonal
def is_pentagonal(t):
    value = pentagonal_inverse(t)
    return math.floor(value) == value

def pentagonal_generator():
    n = 0
    while(True):
        n += 1
        yield (n*(3*n - 1))/2

if __name__ == '__main__':
    stime = time.time()
    pentagonals = []
    pentagonal = pentagonal_generator()
    min_difference = None
    for i in range(2):
        pentagonals.append(pentagonal.__next__())
    while(True):
        max_pentagonal = pentagonals[-1] 
        for p in pentagonals[:-1]:
            if is_pentagonal(max_pentagonal + p):
                if is_pentagonal(max_pentagonal - p):
                    difference = max_pentagonal - p
                    if min_difference is None:
                        min_difference = difference 
                    elif min_difference > difference:
                        min_difference = difference
        pentagonals.append(pentagonal.__next__())
        if(min_difference is not None):# and \
          #pentagonals[-1] - pentagonals[-2] > min_difference):
            break
    print("Solution: {0}\nRuntime: {1}".format(min_difference,time.time()-stime))
