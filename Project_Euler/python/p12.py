
import os
import math

'''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

#return list of factors of n
def list_factors(n):
    factors = list()
    factors.append(int(1))
    max = math.sqrt(n)
    i = int(2)
    while i <= max:
        if n % i == 0:
            d = int(n/i)
            factors.append(i)
            if d != i:
                factors.append(d)
        i = i + 1
    factors.append(n)
    return factors

#triangle number
def triangle_number(n):
    return int((n*(n+1))/2)

if __name__ == '__main__':

    n = int(1)
    while True:
        if len(list_factors(triangle_number(n))) > 500:
            print(triangle_number(n))
            break
        n = n + 1 
