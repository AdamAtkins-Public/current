import os
import time
"""
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are
all figurate (polygonal) numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	P4,n=n2 	  	1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
    This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

def dictionary_delver(d,starts_with,ends_with,sequence,remaining):
    if remaining == 0 and starts_with == ends_with:
        return sequence
    return_value = None
    for i in range(4,-1,-1):
        if return_value is not None:
            break
        key = remaining & 1 << i 
        if key != 0:
            sd, ed = d[key]
            if starts_with in ed and return_value is None:
                for value in ed[starts_with]:
                    sequence.insert(0,value)
                    return_value = dictionary_delver(d,value[:2],ends_with,sequence,remaining - key)
                    if return_value is not None:
                        break
                    sequence.pop(0)#
            if ends_with in sd and return_value is None:
                for value in sd[ends_with]:
                    sequence.append(value)
                    return_value = dictionary_delver(d,starts_with,value[2:],sequence,remaining - key)
                    if return_value is not None:
                        break
                    sequence.pop(-1)#
    return return_value 

def triangle(n): 
    ts = [dict(),dict()]
    while True:
        t = str(int(n * (n + 1) / 2))
        if len(t) > 4:
            break
        if t[:2] not in ts[0]:
            ts[0][t[:2]] = [t]
        else:
            ts[0][t[:2]].append(t)
        if t[2:] not in ts[1]:
            ts[1][t[2:]] = [t]
        else:
            ts[1][t[2:]].append(t) 
        n+=1
    return ts[0], ts[1]

def square(n):
    sqs = [dict(),dict()]
    while True:
        sq = str(int(n * n))
        if len(sq) > 4:
            break
        if sq[:2] not in sqs[0]:
            sqs[0][sq[:2]] = [sq]
        else:
            sqs[0][sq[:2]].append(sq)
        if sq[2:] not in sqs[1]:
            sqs[1][sq[2:]] = [sq]
        else:
            sqs[1][sq[2:]].append(sq) 
        n+=1
    return sqs[0], sqs[1]

def pentagonal(n):
    ps = [dict(),dict()]
    while True:
        p = str(int(n * (3 * n - 1) / 2))
        if len(p) > 4:
            break
        if p[:2] not in ps[0]:
            ps[0][p[:2]] = [p]
        else:
            ps[0][p[:2]].append(p)
        if p[2:] not in ps[1]:
            ps[1][p[2:]] = [p]
        else:
            ps[1][p[2:]].append(p) 
        n+=1
    return ps[0], ps[1]


def hexagonal(n):
    hexs = [dict(),dict()]
    while True:
        hex = str(int(n * (2 * n - 1)))
        if len(hex) > 4:
            break
        if hex[:2] not in hexs[0]:
            hexs[0][hex[:2]] = [hex]
        else:
            hexs[0][hex[:2]].append(hex)
        if hex[2:] not in hexs[1]:
            hexs[1][hex[2:]] = [hex]
        else:
            hexs[1][hex[2:]].append(hex) 
        n+=1
    return hexs[0], hexs[1]

def heptagonal(n):
    heps = [dict(),dict()]
    while True:
        hep = str(int(n * (5 * n - 3) / 2))
        if len(hep) > 4:
            break
        if hep[:2] not in heps[0]:
            heps[0][hep[:2]] = [hep]
        else:
            heps[0][hep[:2]].append(hep)
        if hep[2:] not in heps[1]:
            heps[1][hep[2:]] = [hep]
        else:
            heps[1][hep[2:]].append(hep) 
        n+=1
    return heps[0], heps[1]

def octagonal(n):
    octa = []
    while True:
        oct = str(int(n * (3 * n - 2)))
        if len(oct) > 4:
            break
        octa.append(oct)
        n += 1
    return octa

if __name__ == '__main__':
    stime = time.time()
    d = dict()
    d[1] = triangle(44)
    d[2] = square(32)
    d[4] = pentagonal(26)
    d[8] = hexagonal(23)
    d[16] = heptagonal(21)

    remaining = int(0)
    for i in range(5):
        remaining += 1 << i

    solution = []
    for oct in octagonal(19):
        solution = [oct]
        solution = dictionary_delver(d,oct[:2],oct[2:],solution,remaining)
        if solution is not None:
            break
    print("Solution:{} Runtime:{}".format(sum(int(value) for value in solution), time.time() - stime))
